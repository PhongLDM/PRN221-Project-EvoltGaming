// <auto-generated />
using System;
using EvoltingStore.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvoltingStore.Migrations
{
    [DbContext(typeof(EvoltingStoreContext))]
    [Migration("20240614214553_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EvoltingStore.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("commentId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("gameId");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime")
                        .HasColumnName("postTime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("CommentId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("EvoltingStore.Entity.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gameId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.Property<string>("OfficialLink")
                        .HasColumnType("text")
                        .HasColumnName("officialLink");

                    b.Property<string>("PirateLink")
                        .HasColumnType("text")
                        .HasColumnName("pirateLink");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("platform");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("publisher");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("releaseDate");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("date")
                        .HasColumnName("updateDate");

                    b.HasKey("GameId");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("EvoltingStore.Entity.GameRequirement", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("gameId");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("DirectX")
                        .HasColumnType("int")
                        .HasColumnName("directX");

                    b.Property<string>("Graphic")
                        .HasColumnType("text")
                        .HasColumnName("graphic");

                    b.Property<double>("Memory")
                        .HasColumnType("float")
                        .HasColumnName("memory");

                    b.Property<string>("Os")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("os");

                    b.Property<string>("Other")
                        .HasColumnType("text")
                        .HasColumnName("other");

                    b.Property<string>("Processor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("processor");

                    b.Property<double>("Storage")
                        .HasColumnType("float")
                        .HasColumnName("storage");

                    b.HasKey("GameId", "Type");

                    b.ToTable("GameRequirement", (string)null);
                });

            modelBuilder.Entity("EvoltingStore.Entity.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("genreId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"), 1L, 1);

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("genreName");

                    b.HasKey("GenreId");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("EvoltingStore.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("roleName");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("EvoltingStore.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isActive");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("roleId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "Unique_username")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EvoltingStore.Entity.UserDetail", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("createdDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("Image")
                        .HasColumnType("text")
                        .HasColumnName("image");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastName");

                    b.HasKey("UserId");

                    b.ToTable("UserDetail", (string)null);
                });

            modelBuilder.Entity("Favourite", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("gameId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favourite", (string)null);
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int")
                        .HasColumnName("gameId");

                    b.Property<int>("GenreId")
                        .HasColumnType("int")
                        .HasColumnName("genreId");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenre", (string)null);
                });

            modelBuilder.Entity("EvoltingStore.Entity.Comment", b =>
                {
                    b.HasOne("EvoltingStore.Entity.Game", "Game")
                        .WithMany("Comments")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Game");

                    b.HasOne("EvoltingStore.Entity.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User");

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EvoltingStore.Entity.GameRequirement", b =>
                {
                    b.HasOne("EvoltingStore.Entity.Game", "Game")
                        .WithMany("GameRequirements")
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_GameRequirement_Game");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("EvoltingStore.Entity.User", b =>
                {
                    b.HasOne("EvoltingStore.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EvoltingStore.Entity.UserDetail", b =>
                {
                    b.HasOne("EvoltingStore.Entity.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("EvoltingStore.Entity.UserDetail", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserDetail_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Favourite", b =>
                {
                    b.HasOne("EvoltingStore.Entity.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_Game");

                    b.HasOne("EvoltingStore.Entity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Favourite_User");
                });

            modelBuilder.Entity("GameGenre", b =>
                {
                    b.HasOne("EvoltingStore.Entity.Game", null)
                        .WithMany()
                        .HasForeignKey("GameId")
                        .IsRequired()
                        .HasConstraintName("FK_GameGenre_Game");

                    b.HasOne("EvoltingStore.Entity.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_GameGenre_Genre");
                });

            modelBuilder.Entity("EvoltingStore.Entity.Game", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GameRequirements");
                });

            modelBuilder.Entity("EvoltingStore.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("EvoltingStore.Entity.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("UserDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
